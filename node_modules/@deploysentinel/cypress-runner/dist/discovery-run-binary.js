"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getPkgRootFromElectronBinary: ()=>getPkgRootFromElectronBinary,
    getConfigFromElectronBinary: ()=>getConfigFromElectronBinary,
    getServerInitFromElectronBinary: ()=>getServerInitFromElectronBinary
});
const _fs = /*#__PURE__*/ _interopRequireDefault(require("fs"));
const _os = require("os");
const _path = /*#__PURE__*/ _interopRequireDefault(require("path"));
const _files = require("./files");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getPkgRootFromElectronBinary(binaryPath) {
    _fs.default.statSync(binaryPath);
    // MacOS
    // ~/Downloads/Cypress.app/Contents/MacOS/Cypress
    if ((0, _os.platform)() === 'darwin') {
        return _path.default.resolve(_path.default.resolve(binaryPath).split('Contents/MacOS/Cypress')[0] + '/Contents/Resources/app');
    }
    // Windows
    // ~/Downloads/Cypress/Cypress.exe
    if ((0, _os.platform)() === 'win32') {
        return _path.default.resolve(_path.default.resolve(binaryPath).split('/Cypress.exe')[0] + '/resources/app');
    }
    // linux
    // > ~/Downloads/Cypress/Cypress
    return _path.default.resolve(_path.default.dirname(_path.default.resolve(binaryPath)) + '/resources/app');
}
function getConfigFromElectronBinary(binaryPath) {
    _fs.default.statSync(binaryPath);
    return (0, _files.getConfigFiles)(getPkgRootFromElectronBinary(binaryPath));
}
function getServerInitFromElectronBinary(binaryPath) {
    _fs.default.statSync(binaryPath);
    return (0, _files.getServerInit)(getPkgRootFromElectronBinary(binaryPath));
}
