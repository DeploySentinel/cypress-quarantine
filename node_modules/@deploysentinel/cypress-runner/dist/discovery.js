"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getConfigFilesPaths: ()=>getConfigFilesPaths,
    getServerInitPath: ()=>getServerInitPath
});
const _fs = /*#__PURE__*/ _interopRequireDefault(require("fs"));
const _path = /*#__PURE__*/ _interopRequireDefault(require("path"));
const _debug = require("./debug");
const _discoveryCli = require("./discovery-cli");
const _discoveryRunBinary = require("./discovery-run-binary");
const _discoveryStateModule = require("./discovery-state-module");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getConfigFilesPaths() {
    return _getConfigFilesPaths.apply(this, arguments);
}
function _getConfigFilesPaths() {
    _getConfigFilesPaths = _asyncToGenerator(function*(cypressConfigFilePath = null) {
        if (typeof cypressConfigFilePath === 'string') {
            const explicitPath = _path.default.resolve(_path.default.normalize(cypressConfigFilePath.trim()));
            (0, _debug.debug)('Explicit package path provided via CYPRESS_PACKAGE_CONFIG_PATH: %s', explicitPath);
            // verify the path
            _fs.default.statSync(explicitPath);
            return {
                configFilePath: explicitPath,
                backupConfigFilePath: explicitPath.replace('app.yml', '_app.yml')
            };
        }
        if (typeof process.env.CYPRESS_RUN_BINARY === 'string') {
            (0, _debug.debug)('CYPRESS_RUN_BINARY: %s', process.env.CYPRESS_RUN_BINARY);
            return tryAll(()=>(0, _discoveryRunBinary.getConfigFromElectronBinary)(process.env.CYPRESS_RUN_BINARY));
        }
        return tryAll(_discoveryStateModule.getConfigFilesPaths_stateModule, _discoveryCli.getConfigFilesPaths_cli);
    });
    return _getConfigFilesPaths.apply(this, arguments);
}
function getServerInitPath() {
    return _getServerInitPath.apply(this, arguments);
}
function _getServerInitPath() {
    _getServerInitPath = _asyncToGenerator(function*() {
        if (typeof process.env.CYPRESS_RUN_BINARY === 'string') {
            (0, _debug.debug)('CYPRESS_RUN_BINARY: %s', process.env.CYPRESS_RUN_BINARY);
            return tryAll(()=>(0, _discoveryRunBinary.getServerInitFromElectronBinary)(process.env.CYPRESS_RUN_BINARY));
        }
        return tryAll(_discoveryStateModule.getServerInitPath_stateModule, _discoveryCli.getServerInitPath_cli);
    });
    return _getServerInitPath.apply(this, arguments);
}
function tryAll() {
    return _tryAll.apply(this, arguments);
}
function _tryAll() {
    _tryAll = _asyncToGenerator(function*(...fns) {
        const errors = [];
        for (const fn of fns){
            try {
                // @ts-ignore
                return yield fn();
            } catch (e) {
                (0, _debug.debug)('Discovery error: %s', e);
                errors.push(e);
            }
        }
        console.error(errors);
        throw new Error('Cannot detect cypress location');
    });
    return _tryAll.apply(this, arguments);
}
