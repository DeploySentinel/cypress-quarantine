"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _js = require("../js");
const _path = require("../path");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
// jest.mock('../path');
const nonPatchedFile = `
process.env.CYPRESS_INTERNAL_ENV =
  process.env.CYPRESS_INTERNAL_ENV || "production";
require("./packages/server");
`;
const patchedFile = `
(
  function ${_js.FN_ID}() {
    try { 
        require('oldPath.js');
    } catch (e) {
        // noop;
    }
}
)();

process.env.CYPRESS_INTERNAL_ENV =
  process.env.CYPRESS_INTERNAL_ENV || "production";
require('./packages/server');
`;
const result = (path = 'foo')=>`(function ${_js.FN_ID}() {
    try {
        require('${path}')('source', 'backup');
    } catch (e) {
        console.error(e);
    }
}());
process.env.CYPRESS_INTERNAL_ENV = process.env.CYPRESS_INTERNAL_ENV || 'production';
require('./packages/server');`;
test('should return false for non-injected code', ()=>{
    expect((0, _js.hasInjected)((0, _js.parseJS)(nonPatchedFile))).toEqual(false);
});
test('should return true for injected code', ()=>{
    expect((0, _js.hasInjected)((0, _js.parseJS)(patchedFile))).toEqual(true);
});
test('should inject new code', /*#__PURE__*/ _asyncToGenerator(function*() {
    expect((0, _js.instrumentCypressInit)(nonPatchedFile, 'foo', 'source', 'backup')).toEqual(result());
}));
test('should replace existing code', /*#__PURE__*/ _asyncToGenerator(function*() {
    expect((0, _js.instrumentCypressInit)(patchedFile, 'foo', 'source', 'backup')).toEqual(result());
}));
test('should inject new code for windows path', /*#__PURE__*/ _asyncToGenerator(function*() {
    expect((0, _js.instrumentCypressInit)(nonPatchedFile, 'C:\\Users\\Administrator\\Desktop\\node_modules\\cy2\\dist/injected.js', 'source', 'backup')).toEqual(result((0, _path.normalizePath)('C:\\Users\\Administrator\\Desktop\\node_modules\\cy2\\dist/injected.js')));
}));
