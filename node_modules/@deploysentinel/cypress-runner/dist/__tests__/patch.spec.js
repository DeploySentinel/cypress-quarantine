"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const { nanoid  } = require('nanoid');
const { patch  } = require('../patch');
const { getConfigFilesPaths  } = require('../discovery');
jest.mock('../discovery');
const original = path.resolve(__dirname, './fixtures/app.yml');
test('should patch', /*#__PURE__*/ _asyncToGenerator(function*() {
    const seed = nanoid();
    const filename = `./fixtures/__temp_fixture_${seed}`;
    const configFilePath = path.resolve(__dirname, `${filename}.yml`);
    const backupConfigFilePath = path.resolve(__dirname, `${filename}_backup.yml`);
    fs.copyFileSync(original, configFilePath);
    getConfigFilesPaths.mockResolvedValueOnce({
        configFilePath,
        backupConfigFilePath
    });
    yield patch(seed);
    const doc = yaml.load(fs.readFileSync(configFilePath, 'utf8'));
    expect(doc.production.api_url).toEqual(seed);
}));
