"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseJS: ()=>parseJS,
    generateJS: ()=>generateJS,
    FN_ID: ()=>FN_ID,
    instrumentCypressInit: ()=>instrumentCypressInit,
    hasInjected: ()=>hasInjected
});
const _acorn = require("acorn");
const _escodegen = /*#__PURE__*/ _interopRequireDefault(require("escodegen"));
const _estraverse = /*#__PURE__*/ _interopRequireDefault(require("estraverse"));
const _path = require("./path");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const parseJS = (code)=>(0, _acorn.parse)(code, {
        ecmaVersion: 2020
    });
const generateJS = (ast)=>_escodegen.default.generate(ast);
const FN_ID = 'cy2_injected';
const instrumentCypressInit = (code, injectedModulePath, entryPointPath, backupPath)=>{
    const normalizedPath = (0, _path.normalizePath)(injectedModulePath);
    const injectedFn = `
function ${FN_ID}() {
    try { require('${normalizedPath}')("${entryPointPath}", "${backupPath}"); }
    catch (e) {
      console.error(e);
    }
}`;
    const injectedCode = `(${injectedFn})();`;
    const ast = parseJS(code);
    if (!hasInjected(ast)) {
        return generateJS(injectAST(ast, parseJS(injectedCode)));
    }
    return generateJS(replaceAST(ast, parseJS(injectedFn)));
};
function hasInjected(ast) {
    let found = false;
    _estraverse.default.traverse(ast, {
        enter: function(node) {
            if (node.type == _estraverse.default.Syntax.Identifier && node.name === FN_ID) {
                found = true;
                return this.break();
            }
        }
    });
    return found;
}
function injectAST(ast, injectedAst) {
    _estraverse.default.traverse(ast, {
        enter: function(node) {
            if (node.type === _estraverse.default.Syntax.Program) {
                node.body.unshift(injectedAst.body[0]);
                return this.break();
            }
        }
    });
    return ast;
}
function replaceAST(ast, injectedFnAst) {
    return _estraverse.default.replace(ast, {
        enter: function(node) {
            var _node_id;
            if (node.type == _estraverse.default.Syntax.FunctionExpression && ((_node_id = node.id) == null ? void 0 : _node_id.name) === FN_ID) {
                return injectedFnAst.body[0];
            }
        }
    });
}
