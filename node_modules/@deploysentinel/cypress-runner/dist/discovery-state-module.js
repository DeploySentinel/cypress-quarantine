"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getServerInitPath_stateModule: ()=>getServerInitPath_stateModule,
    getConfigFilesPaths_stateModule: ()=>getConfigFilesPaths_stateModule
});
const _path = /*#__PURE__*/ _interopRequireDefault(require("path"));
const _binPath = require("./bin-path");
const _debug = require("./debug");
const _files = require("./files");
const _fs = require("./fs");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getServerInitPath_stateModule() {
    return _getServerInitPath_stateModule.apply(this, arguments);
}
function _getServerInitPath_stateModule() {
    _getServerInitPath_stateModule = _asyncToGenerator(function*() {
        (0, _debug.debug)('Trying discovery via state module');
        const stateModulePath = yield getStateModulePath();
        const state = require(stateModulePath);
        const pkgPath = state.getBinaryPkgPath(state.getBinaryDir());
        (0, _debug.debug)('Cypress pkgPath: %s', pkgPath);
        const pkgRoot = _path.default.dirname(pkgPath);
        (0, _debug.debug)('Cypress pkgRoot: %s', pkgRoot);
        return (0, _files.getServerInit)(pkgRoot);
    });
    return _getServerInitPath_stateModule.apply(this, arguments);
}
function getConfigFilesPaths_stateModule() {
    return _getConfigFilesPaths_stateModule.apply(this, arguments);
}
function _getConfigFilesPaths_stateModule() {
    _getConfigFilesPaths_stateModule = _asyncToGenerator(function*() {
        (0, _debug.debug)('Trying discovery via state module');
        const stateModulePath = yield getStateModulePath();
        const state = require(stateModulePath);
        const pkgPath = state.getBinaryPkgPath(state.getBinaryDir());
        (0, _debug.debug)('Cypress pkgPath: %s', pkgPath);
        const pkgRoot = _path.default.dirname(pkgPath);
        (0, _debug.debug)('Cypress pkgRoot: %s', pkgRoot);
        return (0, _files.getConfigFiles)(pkgRoot);
    });
    return _getConfigFilesPaths_stateModule.apply(this, arguments);
}
function getStateModulePath() {
    return _getStateModulePath.apply(this, arguments);
}
function _getStateModulePath() {
    _getStateModulePath = _asyncToGenerator(function*() {
        try {
            const cliBinPath = yield (0, _binPath.getCypressCLIBinPath)();
            const candidates = [
                _path.default.join(_path.default.dirname(cliBinPath), 'node_modules', 'cypress/lib/tasks/state.js'),
                _path.default.join(_path.default.dirname(cliBinPath), '..', 'lib/tasks/state.js'),
                _path.default.join(_path.default.dirname(cliBinPath), '..', 'cypress', 'lib/tasks/state.js')
            ];
            (0, _debug.debug)('Cypress state module candidates: %o', candidates);
            const result = (0, _fs.lookupPaths)(candidates);
            if (!result) {
                throw new Error('Cannot detect cypress');
            }
            (0, _debug.debug)('Cypress state module detected: %s', result);
            return result;
        } catch (error) {
            throw new Error('Cannot detect cypress. Is cypress installed?');
        }
    });
    return _getStateModulePath.apply(this, arguments);
}
