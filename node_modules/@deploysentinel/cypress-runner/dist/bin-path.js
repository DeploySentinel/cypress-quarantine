"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCypressCLIBinPath", {
    enumerable: true,
    get: ()=>getCypressCLIBinPath
});
const _fs = /*#__PURE__*/ _interopRequireDefault(require("fs"));
const _npmWhich = /*#__PURE__*/ _interopRequireDefault(require("npm-which"));
const _os = require("os");
const _path = /*#__PURE__*/ _interopRequireWildcard(require("path"));
const _util = require("util");
const _context = require("./context");
const _debug = require("./debug");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function getCypressCLIBinPath() {
    return _getCypressCLIBinPath.apply(this, arguments);
}
function _getCypressCLIBinPath() {
    _getCypressCLIBinPath = _asyncToGenerator(function*() {
        let cliBinPath = null;
        const ctx = (0, _context.getContext)();
        if (ctx == null ? void 0 : ctx.has('cypressPackagePath')) {
            cliBinPath = _path.default.join((0, _path.dirname)(ctx.get('cypressPackagePath')), 'bin', 'cypress');
        } else {
            cliBinPath = yield whichCypress();
        }
        if (!cliBinPath) {
            throw new Error('Cannot detect cypress package executable script');
        }
        const packagePath = _path.default.normalize(_fs.default.realpathSync(cliBinPath));
        (0, _debug.debug)('Cypress normalized binary path: %s', packagePath);
        return packagePath;
    });
    return _getCypressCLIBinPath.apply(this, arguments);
}
function whichCypress() {
    return _whichCypress.apply(this, arguments);
}
function _whichCypress() {
    _whichCypress = _asyncToGenerator(function*() {
        const location = (0, _os.platform)() === 'win32' ? process.cwd() : __dirname;
        const pWhich = (0, _util.promisify)((0, _npmWhich.default)(location));
        return pWhich('cypress');
    });
    return _whichCypress.apply(this, arguments);
}
