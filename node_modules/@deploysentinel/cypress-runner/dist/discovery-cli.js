"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getServerInitPath_cli: ()=>getServerInitPath_cli,
    getConfigFilesPaths_cli: ()=>getConfigFilesPaths_cli
});
const _childProcess = /*#__PURE__*/ _interopRequireDefault(require("child_process"));
const _os = require("os");
const _path = /*#__PURE__*/ _interopRequireDefault(require("path"));
const _debug = require("./debug");
const _binPath = require("./bin-path");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getServerInitPath_cli() {
    return _getServerInitPath_cli.apply(this, arguments);
}
function _getServerInitPath_cli() {
    _getServerInitPath_cli = _asyncToGenerator(function*() {
        (0, _debug.debug)('Trying discovery via cypress CLI');
        const cliBinPath = yield (0, _binPath.getCypressCLIBinPath)();
        const basePath = yield getBasePath(cliBinPath);
        (0, _debug.debug)('Cypress base path is: %s', basePath);
        const version = yield getCypressVersion(cliBinPath);
        (0, _debug.debug)('Cypress version is: %s', version);
        return _path.default.resolve(basePath, version, getPackagedPath(), 'index.js');
    });
    return _getServerInitPath_cli.apply(this, arguments);
}
function getConfigFilesPaths_cli() {
    return _getConfigFilesPaths_cli.apply(this, arguments);
}
function _getConfigFilesPaths_cli() {
    _getConfigFilesPaths_cli = _asyncToGenerator(function*() {
        (0, _debug.debug)('Trying discovery via cypress CLI');
        const cliBinPath = yield (0, _binPath.getCypressCLIBinPath)();
        const basePath = yield getBasePath(cliBinPath);
        (0, _debug.debug)('Cypress base path is: %s', basePath);
        const version = yield getCypressVersion(cliBinPath);
        (0, _debug.debug)('Cypress version is: %s', version);
        const configFilePath = _path.default.resolve(basePath, version, getPackagedPath(), 'packages/server/config/app.yml');
        const backupConfigFilePath = _path.default.resolve(basePath, version, getPackagedPath(), 'packages/server/config/_app.yml');
        return {
            configFilePath,
            backupConfigFilePath
        };
    });
    return _getConfigFilesPaths_cli.apply(this, arguments);
}
function getBasePath(binPath) {
    return _getBasePath.apply(this, arguments);
}
function _getBasePath() {
    _getBasePath = _asyncToGenerator(function*(binPath) {
        (0, _debug.debug)('Getting base path: %s', `${binPath} cache path`);
        return (yield execute(`${binPath} cache path`)).trim();
    });
    return _getBasePath.apply(this, arguments);
}
function getCypressVersion(binPath) {
    return _getCypressVersion.apply(this, arguments);
}
function _getCypressVersion() {
    _getCypressVersion = _asyncToGenerator(function*(binPath) {
        (0, _debug.debug)('Getting cypress version: %s', `${binPath} --version`);
        const version = yield execute(`${binPath} --version`);
        const packageVersion = version.split('\n').find((i)=>i.match(/^Cypress package version/));
        const els = packageVersion == null ? void 0 : packageVersion.split(':').map((i)=>i.trim());
        if (!els || !els[1]) {
            throw new Error('Cannot detect cypress version');
        }
        return els[1];
    });
    return _getCypressVersion.apply(this, arguments);
}
function getPackagedPath() {
    if ((0, _os.platform)() === 'win32') {
        return 'Cypress/resources/app';
    }
    return 'Cypress.app/Contents/Resources/app';
}
function execute(command) {
    return new Promise((resolve, reject)=>{
        _childProcess.default.exec(command, function(error, stdout, stderr) {
            if (error || stderr) {
                reject(error || stderr);
            }
            resolve(stdout);
        });
    });
}
