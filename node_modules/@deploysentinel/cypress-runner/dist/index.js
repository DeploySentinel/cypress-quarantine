"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    patch: ()=>patch,
    run: ()=>run,
    inject: ()=>inject
});
const _context = require("./context");
const _patch = /*#__PURE__*/ _interopRequireWildcard(require("./patch"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const patch = /*#__PURE__*/ _asyncToGenerator(function*(cypressPackagePath = require.resolve('cypress')) {
    yield (0, _context.runInContext)(()=>_patch.patchServerInit(`${__dirname}/injected.js`), new Map().set('cypressPackagePath', cypressPackagePath));
});
const run = /*#__PURE__*/ _asyncToGenerator(function*(label = 'DeploySentinel') {
    console.log(`[${label}] Running cypress with API URL: ${process.env.CYPRESS_API_URL}`);
    yield _patch.verify();
    yield _patch.patchServerInit(`${__dirname}/injected.js`);
    const childProcess = yield _patch.run();
    childProcess.on('exit', (code)=>process.exit(code != null ? code : 1));
});
const inject = /*#__PURE__*/ _asyncToGenerator(function*(injectedAbsolutePath, cypressPackagePath = require.resolve('cypress')) {
    yield (0, _context.runInContext)(()=>_patch.patchServerInit(injectedAbsolutePath), new Map().set('cypressPackagePath', cypressPackagePath));
});
