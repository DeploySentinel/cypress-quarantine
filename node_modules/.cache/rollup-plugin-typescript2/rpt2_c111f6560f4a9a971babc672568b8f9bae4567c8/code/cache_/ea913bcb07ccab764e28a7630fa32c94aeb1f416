{"code":"import { __awaiter, __generator } from \"tslib\";\r\n// TODO -> type this (maybe clone it to our repo)\r\nvar cypressCommitInfo = require('@cypress/commit-info');\r\nimport * as ciProvidersModule from '../modules/ci_providers';\r\nimport { validators } from '../utils/shared';\r\nvar GitClient = /** @class */ (function () {\r\n    function GitClient(logger) {\r\n        this.commitInfoCache = null;\r\n        this.logger = logger;\r\n    }\r\n    GitClient.prototype.getCommitInfo = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var info, commitInfoTimestampInt, commitInfo, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.commitInfoCache !== null) {\r\n                            return [2 /*return*/, this.commitInfoCache];\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, cypressCommitInfo.commitInfo()];\r\n                    case 2:\r\n                        info = _a.sent();\r\n                        commitInfoTimestampInt = parseInt(info.timestamp);\r\n                        commitInfo = ciProvidersModule.commitDefaults({\r\n                            authorEmail: info.email,\r\n                            authorName: info.author,\r\n                            ciBuildId: ciProvidersModule.getCIBuildId(),\r\n                            branch: info.branch,\r\n                            defaultBranch: null,\r\n                            message: info.message,\r\n                            metadata: ciProvidersModule.ciParams(),\r\n                            remoteBranch: null,\r\n                            remoteOrigin: info.remote,\r\n                            sha: info.sha,\r\n                            timestamp: validators.isInteger(commitInfoTimestampInt)\r\n                                ? commitInfoTimestampInt * 1000\r\n                                : null,\r\n                        });\r\n                        this.commitInfoCache = commitInfo;\r\n                        return [2 /*return*/, commitInfo];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        // TODO: do we need to retry in the next run ?\r\n                        console.error(e_1);\r\n                        this.logger.error({ message: e_1, location: 'getCommitInfo' });\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return GitClient;\r\n}());\r\nexport default GitClient;\r\n//# sourceMappingURL=git.js.map","references":["/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/@cypress/commit-info/src/index.js","/home/warren/Codes/deploysentinel/cypress-quarantine/src/modules/ci_providers.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/types.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/clients/api.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/utils/shared.ts"],"map":"{\"version\":3,\"file\":\"git.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/clients/git.ts\"],\"names\":[],\"mappings\":\";AAAA,iDAAiD;AACjD,IAAM,iBAAiB,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAE1D,OAAO,KAAK,iBAAiB,MAAM,yBAAyB,CAAC;AAG7D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C;IAKE,mBAAY,MAAc;QAJlB,oBAAe,GAAsB,IAAI,CAAC;QAKhD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEK,iCAAa,GAAnB;;;;;;wBACE,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE;4BACjC,sBAAO,IAAI,CAAC,eAAe,EAAC;yBAC7B;;;;wBAEc,qBAAM,iBAAiB,CAAC,UAAU,EAAE,EAAA;;wBAA3C,IAAI,GAAG,SAAoC;wBAC3C,sBAAsB,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBAElD,UAAU,GAAG,iBAAiB,CAAC,cAAc,CAAC;4BAClD,WAAW,EAAE,IAAI,CAAC,KAAK;4BACvB,UAAU,EAAE,IAAI,CAAC,MAAM;4BACvB,SAAS,EAAE,iBAAiB,CAAC,YAAY,EAAE;4BAC3C,MAAM,EAAE,IAAI,CAAC,MAAM;4BACnB,aAAa,EAAE,IAAI;4BACnB,OAAO,EAAE,IAAI,CAAC,OAAO;4BACrB,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,EAAE;4BACtC,YAAY,EAAE,IAAI;4BAClB,YAAY,EAAE,IAAI,CAAC,MAAM;4BACzB,GAAG,EAAE,IAAI,CAAC,GAAG;4BACb,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,sBAAsB,CAAC;gCACrD,CAAC,CAAC,sBAAsB,GAAG,IAAI;gCAC/B,CAAC,CAAC,IAAI;yBACT,CAAC,CAAC;wBACH,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;wBAClC,sBAAO,UAAU,EAAC;;;wBAElB,8CAA8C;wBAC9C,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;wBACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,GAAU,EAAE,QAAQ,EAAE,eAAe,EAAE,CAAC,CAAC;wBACtE,sBAAO,IAAI,EAAC;;;;;KAEf;IACH,gBAAC;AAAD,CAAC,AAzCD,IAyCC\"}","dts":{"name":"/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/clients/git.d.ts","writeByteOrderMark":false,"text":"import { Logger } from './api';\r\nexport default class GitClient {\r\n    private commitInfoCache;\r\n    private readonly logger;\r\n    constructor(logger: Logger);\r\n    getCommitInfo(): Promise<any>;\r\n}\r\n"}}
