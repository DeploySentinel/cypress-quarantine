{"code":"import { __values } from \"tslib\";\r\nimport crypto from 'crypto';\r\nimport fs from 'fs';\r\nimport os from 'os';\r\nimport path from 'path';\r\nimport v8 from 'v8';\r\nimport minimatch from 'minimatch';\r\nimport some from 'lodash/some';\r\nimport stripAnsi from 'strip-ansi';\r\nimport { XMLBuilder, XMLParser } from 'fast-xml-parser';\r\nimport { validators } from './shared';\r\nvar HEARTBEAT_LONG_INTERVAL_MS = 10000;\r\nvar HEARTBEAT_SHORT_INTERVAL_MS = 2000; // used when logger.verbose is false\r\nexport var filterNetworkMocks = function (mocks, filter) {\r\n    return mocks.filter(function (mock) {\r\n        return some(filter.includeUrls, function (includeUrl) { return minimatch(mock.url, includeUrl); }) &&\r\n            !some(filter.excludeUrls, function (excludeUrl) { return minimatch(mock.url, excludeUrl); });\r\n    });\r\n};\r\nexport var getNetworkMockFixtureFilePath = function (fixturesFolder, filePath) {\r\n    return path.join(fixturesFolder, \"ds-network-mock-\".concat(filePath\r\n        .replace(/\\//g, '-')\r\n        .replace('.js', '')\r\n        .replace('.ts', ''), \".json\"));\r\n};\r\nexport var sha1 = function (value) {\r\n    return crypto.createHash('sha1').update(value).digest('hex');\r\n};\r\nexport var getDebuggerUrl = function (runId, isDev) {\r\n    if (isDev) {\r\n        return \"http://localhost:8080/ci/runs/\".concat(runId);\r\n    }\r\n    return \"https://deploysentinel.com/ci/runs/\".concat(runId);\r\n};\r\nvar NetworkEventMock = /** @class */ (function () {\r\n    function NetworkEventMock(filter) {\r\n        this.mocks = new Map();\r\n        this.filter = filter;\r\n    }\r\n    NetworkEventMock.prototype.set = function (testName, events) {\r\n        this.mocks.set(testName, filterNetworkMocks(events, this.filter));\r\n    };\r\n    NetworkEventMock.prototype.get = function (testName) {\r\n        return this.mocks.get(testName);\r\n    };\r\n    NetworkEventMock.prototype.getAll = function () {\r\n        return Object.fromEntries(this.mocks);\r\n    };\r\n    NetworkEventMock.prototype.clear = function () {\r\n        this.mocks.clear();\r\n    };\r\n    return NetworkEventMock;\r\n}());\r\nexport { NetworkEventMock };\r\nvar JunitReporterProcessor = /** @class */ (function () {\r\n    function JunitReporterProcessor(reporterOptions) {\r\n        this.xmlParser = new XMLParser({\r\n            ignoreAttributes: false,\r\n        });\r\n        this.xmlBuilder = new XMLBuilder({\r\n            ignoreAttributes: false,\r\n        });\r\n        this.reporterOptions = reporterOptions;\r\n        this.parentDir = JunitReporterProcessor.getParentDir(reporterOptions);\r\n    }\r\n    JunitReporterProcessor.prototype.start = function (runId, metadata) {\r\n        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\r\n        var _this = this;\r\n        var _e;\r\n        // FIXME: type testcase values\r\n        var attachDebuggerUrlToTestCase = function (testcase) {\r\n            var _a;\r\n            var testCaseName = JunitReporterProcessor.getTestCaseName(testcase, _this.reporterOptions);\r\n            var suiteTitleSeparatedBy = JunitReporterProcessor.getSuiteTitleSeparatedBy(_this.reporterOptions);\r\n            // mocha-junit-reporter uses stripAnsi to escape ANSI codes in test titles\r\n            var runTestCaseName = stripAnsi(metadata['suiteTitles'].join(suiteTitleSeparatedBy));\r\n            if (testCaseName &&\r\n                runTestCaseName &&\r\n                testCaseName.trim() === runTestCaseName.trim()) {\r\n                // TODO -> inject isDev\r\n                testcase['@_deploysentinel_debugger_url'] = getDebuggerUrl(runId, false);\r\n                // A test could either be a failure or an error.\r\n                // See: https://llg.cubic.org/docs/junit/\r\n                var testCaseErrBlock = (testcase === null || testcase === void 0 ? void 0 : testcase.failure) != null\r\n                    ? 'failure'\r\n                    : (testcase === null || testcase === void 0 ? void 0 : testcase.error) != null\r\n                        ? 'error'\r\n                        : null;\r\n                if (testCaseErrBlock != null &&\r\n                    ((_a = testcase === null || testcase === void 0 ? void 0 : testcase[testCaseErrBlock]) === null || _a === void 0 ? void 0 : _a['#text']) != null) {\r\n                    // TODO -> inject isDev\r\n                    testcase[testCaseErrBlock]['#text'] = \"\".concat(testcase[testCaseErrBlock]['#text'], \"\\n\\nDeploySentinel Debugger URL: \").concat(getDebuggerUrl(runId, false), \" (\").concat(metadata.retryNumber === 0\r\n                        ? 'Initial Attempt'\r\n                        : \"Retry \".concat(metadata.retryNumber), \")\");\r\n                }\r\n            }\r\n        };\r\n        var files = fs.readdirSync(this.parentDir, { withFileTypes: true });\r\n        try {\r\n            for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {\r\n                var name_1 = files_1_1.value.name;\r\n                if (!name_1.includes('.xml')) {\r\n                    continue;\r\n                }\r\n                var success = false;\r\n                var filePath = \"\".concat(this.parentDir, \"/\").concat(name_1);\r\n                try {\r\n                    var xmlRawString = fs.readFileSync(filePath, { encoding: 'utf-8' });\r\n                    var xmlObject = this.xmlParser.parse(xmlRawString);\r\n                    var testsuites = (_e = xmlObject === null || xmlObject === void 0 ? void 0 : xmlObject.testsuites) === null || _e === void 0 ? void 0 : _e.testsuite;\r\n                    if (!Array.isArray(testsuites) && validators.isObject(testsuites)) {\r\n                        testsuites = [testsuites];\r\n                    }\r\n                    if (Array.isArray(testsuites)) {\r\n                        var specCache = void 0;\r\n                        try {\r\n                            // assuming one test file per xml\r\n                            for (var testsuites_1 = (e_2 = void 0, __values(testsuites)), testsuites_1_1 = testsuites_1.next(); !testsuites_1_1.done; testsuites_1_1 = testsuites_1.next()) {\r\n                                var testsuite = testsuites_1_1.value;\r\n                                if (metadata.spec === (testsuite === null || testsuite === void 0 ? void 0 : testsuite['@_file'])) {\r\n                                    specCache = testsuite['@_file'];\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (testsuites_1_1 && !testsuites_1_1.done && (_b = testsuites_1.return)) _b.call(testsuites_1);\r\n                            }\r\n                            finally { if (e_2) throw e_2.error; }\r\n                        }\r\n                        if (specCache) {\r\n                            try {\r\n                                for (var testsuites_2 = (e_3 = void 0, __values(testsuites)), testsuites_2_1 = testsuites_2.next(); !testsuites_2_1.done; testsuites_2_1 = testsuites_2.next()) {\r\n                                    var testsuite = testsuites_2_1.value;\r\n                                    var testcases = testsuite === null || testsuite === void 0 ? void 0 : testsuite.testcase;\r\n                                    if (!Array.isArray(testcases) && validators.isObject(testcases)) {\r\n                                        testcases = [testcases];\r\n                                    }\r\n                                    if (Array.isArray(testcases)) {\r\n                                        try {\r\n                                            for (var testcases_1 = (e_4 = void 0, __values(testcases)), testcases_1_1 = testcases_1.next(); !testcases_1_1.done; testcases_1_1 = testcases_1.next()) {\r\n                                                var testcase = testcases_1_1.value;\r\n                                                attachDebuggerUrlToTestCase(testcase);\r\n                                                success = true;\r\n                                            }\r\n                                        }\r\n                                        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                                        finally {\r\n                                            try {\r\n                                                if (testcases_1_1 && !testcases_1_1.done && (_d = testcases_1.return)) _d.call(testcases_1);\r\n                                            }\r\n                                            finally { if (e_4) throw e_4.error; }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n                            finally {\r\n                                try {\r\n                                    if (testsuites_2_1 && !testsuites_2_1.done && (_c = testsuites_2.return)) _c.call(testsuites_2);\r\n                                }\r\n                                finally { if (e_3) throw e_3.error; }\r\n                            }\r\n                        }\r\n                        if (success) {\r\n                            var xmlString = this.xmlBuilder.build(xmlObject);\r\n                            // overwrite xml file\r\n                            fs.writeFileSync(filePath, xmlString);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.log(\"Invalid xml at: \".concat(filePath));\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    JunitReporterProcessor.getParentDir = function (options) {\r\n        return path.dirname((options === null || options === void 0 ? void 0 : options.mochaFile) || '.');\r\n    };\r\n    // suites separator, default is space (' '), or period ('.') in jenkins mode\r\n    JunitReporterProcessor.getSuiteTitleSeparatedBy = function (options) {\r\n        var jenkinsMode = Boolean(options === null || options === void 0 ? void 0 : options.jenkinsMode);\r\n        return (options === null || options === void 0 ? void 0 : options.suiteTitleSeparatedBy) || (jenkinsMode ? '.' : ' ');\r\n    };\r\n    JunitReporterProcessor.getTestCaseName = function (testcase, options) {\r\n        var e_5, _a;\r\n        var testCaseSwitchClassnameAndName = Boolean(options === null || options === void 0 ? void 0 : options.testCaseSwitchClassnameAndName);\r\n        var jenkinsMode = Boolean(options === null || options === void 0 ? void 0 : options.jenkinsMode);\r\n        var suiteTitleSeparatedBy = JunitReporterProcessor.getSuiteTitleSeparatedBy(options);\r\n        var testCaseName = testcase['@_name'];\r\n        if (jenkinsMode && testCaseSwitchClassnameAndName) {\r\n            testCaseName = testcase['@_classname']\r\n                ? \"\".concat(testcase['@_classname']).concat(suiteTitleSeparatedBy).concat(testcase['@_name'])\r\n                : testcase['@_name'];\r\n        }\r\n        else if (!jenkinsMode && testCaseSwitchClassnameAndName) {\r\n            testCaseName = testcase['@_classname'];\r\n        }\r\n        else if (jenkinsMode && !testCaseSwitchClassnameAndName) {\r\n            testCaseName = testcase['@_name']\r\n                ? \"\".concat(testcase['@_name']).concat(suiteTitleSeparatedBy).concat(testcase['@_classname'])\r\n                : testcase['@_classname'];\r\n        }\r\n        try {\r\n            // remove hook name from testCaseName\r\n            // ex: 'random title \"before all\" hook for \"Searches Wikipedia for Milk Tea\"'\r\n            for (var _b = __values([\r\n                'before all',\r\n                'before each',\r\n                'after each',\r\n                'after',\r\n            ]), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var hookName = _c.value;\r\n                var eventSubstr = \"\\\"\".concat(hookName, \"\\\" hook for \\\"\");\r\n                if (testCaseName.includes(eventSubstr)) {\r\n                    return testCaseName.replace(eventSubstr, '').slice(0, -1); // remove last \";\r\n                }\r\n            }\r\n        }\r\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_5) throw e_5.error; }\r\n        }\r\n        return testCaseName;\r\n    };\r\n    return JunitReporterProcessor;\r\n}());\r\nexport { JunitReporterProcessor };\r\nexport var getHeapStatistics = function () { return v8.getHeapStatistics(); };\r\nexport var getOSMetrics = function () { return ({\r\n    freemem: os.freemem(),\r\n    totalmem: os.totalmem(),\r\n}); };\r\n// type this\r\nvar heartbeatMonitor;\r\nexport var registerHeartbeatMonitor = function (getCurrentSpec, logger) {\r\n    heartbeatMonitor = setInterval(function () {\r\n        var _a;\r\n        var spec = getCurrentSpec();\r\n        logger.warning({\r\n            message: 'plugin health check',\r\n            location: (_a = spec === null || spec === void 0 ? void 0 : spec.relative) !== null && _a !== void 0 ? _a : 'n/a',\r\n        });\r\n    }, logger.verbose ? HEARTBEAT_LONG_INTERVAL_MS : HEARTBEAT_SHORT_INTERVAL_MS);\r\n};\r\nexport var deregisterHeartbeatMonitor = function () {\r\n    if (heartbeatMonitor) {\r\n        clearInterval(heartbeatMonitor);\r\n    }\r\n};\r\nexport var isChrome = function (browser) {\r\n    return (['canary', 'chrome', 'chromium'].includes(browser.name) ||\r\n        (browser.family === 'chromium' && browser.name !== 'electron'));\r\n};\r\nexport var isElectron = function (browser) {\r\n    return browser.name === 'electron';\r\n};\r\nexport var ensureRdpPort = function (launchOptions) {\r\n    var existing = launchOptions.args.find(function (arg) { return arg.slice(0, 23) === '--remote-debugging-port'; });\r\n    if (existing) {\r\n        return Number(existing.split('=')[1]);\r\n    }\r\n    var port = 40000 + Math.round(Math.random() * 25000);\r\n    launchOptions.args.push(\"--remote-debugging-port=\".concat(port));\r\n    return port;\r\n};\r\n//# sourceMappingURL=node.js.map","references":["/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/@types/minimatch/index.d.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/@types/lodash/some.d.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/strip-ansi/index.d.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/fast-xml-parser/src/fxp.d.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/types.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/clients/api.ts","/home/warren/Codes/deploysentinel/cypress-quarantine/src/utils/shared.ts"],"map":"{\"version\":3,\"file\":\"node.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/node.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/warren/Codes/deploysentinel/cypress-quarantine/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/utils/node.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport v8 from 'v8';\r\nimport type { DSNetworkMockEvent, JunitReporterOptions, NetworkMocksFilter, RunsMapValue } from '../types';\r\nimport { Logger } from '../clients/api';\r\nexport declare const filterNetworkMocks: (mocks: DSNetworkMockEvent[], filter: NetworkMocksFilter) => DSNetworkMockEvent[];\r\nexport declare const getNetworkMockFixtureFilePath: (fixturesFolder: string, filePath: string) => string;\r\nexport declare const sha1: (value: string) => string;\r\nexport declare const getDebuggerUrl: (runId: string, isDev: boolean) => string;\r\nexport declare class NetworkEventMock {\r\n    private readonly mocks;\r\n    private readonly filter;\r\n    constructor(filter: NetworkMocksFilter);\r\n    set(testName: string, events: DSNetworkMockEvent[]): void;\r\n    get(testName: string): DSNetworkMockEvent[] | undefined;\r\n    getAll(): {\r\n        [k: string]: DSNetworkMockEvent[];\r\n    };\r\n    clear(): void;\r\n}\r\nexport declare class JunitReporterProcessor {\r\n    static getParentDir: (options?: JunitReporterOptions) => string;\r\n    static getSuiteTitleSeparatedBy: (options?: JunitReporterOptions) => string;\r\n    static getTestCaseName: (testcase: Record<string, string>, options?: JunitReporterOptions) => string;\r\n    private xmlParser;\r\n    private xmlBuilder;\r\n    private readonly reporterOptions?;\r\n    private readonly parentDir;\r\n    constructor(reporterOptions?: JunitReporterOptions);\r\n    start(runId: string, metadata: RunsMapValue): void;\r\n}\r\nexport declare const getHeapStatistics: () => v8.HeapInfo;\r\nexport declare const getOSMetrics: () => {\r\n    freemem: number;\r\n    totalmem: number;\r\n};\r\nexport declare const registerHeartbeatMonitor: (getCurrentSpec: () => Cypress.Spec | undefined, logger: Logger) => void;\r\nexport declare const deregisterHeartbeatMonitor: () => void;\r\nexport declare const isChrome: (browser: Cypress.Browser) => boolean;\r\nexport declare const isElectron: (browser: Cypress.Browser) => boolean;\r\nexport declare const ensureRdpPort: (launchOptions: Cypress.BrowserLaunchOptions) => number;\r\n"}}
