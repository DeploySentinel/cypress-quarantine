{"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\r\nimport axios from 'axios';\r\nimport axiosRetry, { exponentialDelay, isNetworkError, isRetryableError, } from 'axios-retry';\r\nimport isObject from 'lodash/isObject';\r\nimport isPlainObject from 'lodash/isPlainObject';\r\nimport pick from 'lodash/pick';\r\nimport safeStringify from 'fast-safe-stringify';\r\nimport { strFromU8, strToU8, zlibSync } from 'fflate';\r\nexport var DEFAULT_DS_TASK_TIMEOUT = 60000;\r\nexport var NETWORK_MOCKS_CACHE_FOLDER_NAME = '.ds-network-cache';\r\nexport var pack = function (input) {\r\n    return strFromU8(zlibSync(strToU8(input)), true);\r\n};\r\nexport var shouldAttachDebugger = function (apiKey) { return Boolean(apiKey); };\r\nexport var isBrowser = function () { return typeof window !== 'undefined'; };\r\nexport var useTry = function (fn) {\r\n    var output = null;\r\n    var error = null;\r\n    try {\r\n        output = fn();\r\n        return [error, output];\r\n    }\r\n    catch (e) {\r\n        error = e;\r\n        return [error, output];\r\n    }\r\n};\r\nexport var tryJSONStringify = function (json) {\r\n    var _a = __read(useTry(function () { return JSON.stringify(json); }), 2), _ = _a[0], result = _a[1];\r\n    return result;\r\n};\r\nexport var jsonStringifyReplacer = function (key, value) {\r\n    if (value === '[Circular]' || value === '[...]') {\r\n        return;\r\n    }\r\n    return value;\r\n};\r\nexport var jsonStringify = function (json) {\r\n    return useTry(function () {\r\n        var _a;\r\n        return (_a = tryJSONStringify(json)) !== null && _a !== void 0 ? _a : safeStringify(json, jsonStringifyReplacer, undefined, {\r\n            depthLimit: 1024,\r\n            edgesLimit: 1024 * 1024,\r\n        });\r\n    });\r\n};\r\nexport var stringifyAndPackArtifacts = function (events, logger, logPrefix) {\r\n    var clonedEvents = null;\r\n    var clonedEvents1 = tryJSONStringify({ events: events });\r\n    if (clonedEvents1 === null) {\r\n        var ts = performanceNow();\r\n        var eventsLength = events.length;\r\n        logger.info({\r\n            location: \"\".concat(logPrefix, \":stringifyAndPackArtifacts:before:jsonStringify\"),\r\n            message: 'log progress',\r\n            meta: {\r\n                eventsLength: eventsLength,\r\n            },\r\n        });\r\n        var filteredEvents = events.map(function (evt) {\r\n            var singleEvent = tryJSONStringify(evt);\r\n            if (singleEvent === null) {\r\n                return __assign(__assign({}, evt), { data: filterNonPrimitiveValues(evt.data) });\r\n            }\r\n            return evt;\r\n        });\r\n        var _a = __read(jsonStringify({\r\n            events: filteredEvents,\r\n        }), 2), error2 = _a[0], clonedEvents2 = _a[1];\r\n        logger.info({\r\n            location: \"\".concat(logPrefix, \":stringifyAndPackArtifacts:after:jsonStringify\"),\r\n            message: 'log progress',\r\n            meta: {\r\n                size: clonedEvents2 === null || clonedEvents2 === void 0 ? void 0 : clonedEvents2.length,\r\n                took: performanceNow() - ts,\r\n            },\r\n        });\r\n        if (error2 !== null) {\r\n            logger.error({\r\n                location: \"\".concat(logPrefix, \":stringifyAndPackArtifacts:after:jsonStringify\"),\r\n                message: error2,\r\n            });\r\n        }\r\n        clonedEvents = clonedEvents2;\r\n    }\r\n    else {\r\n        clonedEvents = clonedEvents1;\r\n    }\r\n    if (clonedEvents) {\r\n        var _b = __read(useTry(function () {\r\n            return pack(clonedEvents);\r\n        }), 2), packError = _b[0], packResults = _b[1];\r\n        if (packError) {\r\n            logger.error({\r\n                location: \"\".concat(logPrefix, \":stringifyAndPackArtifacts:after:pack\"),\r\n                message: packError,\r\n            });\r\n        }\r\n        else if (packResults !== null) {\r\n            return packResults;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nvar EventsHandler = (function () {\r\n    function EventsHandler() {\r\n        this.currentEventIndex = 0;\r\n        this.events = [];\r\n        this.eventIndexLookupMap = new Map();\r\n    }\r\n    EventsHandler.prototype.clear = function () {\r\n        this.events.length = 0;\r\n        this.currentEventIndex = 0;\r\n        this.eventIndexLookupMap.clear();\r\n    };\r\n    EventsHandler.prototype.get = function () {\r\n        return this.events;\r\n    };\r\n    EventsHandler.prototype.push = function (event) {\r\n        this.eventIndexLookupMap.set(event.id, this.currentEventIndex);\r\n        this.events.push(event);\r\n        this.currentEventIndex += 1;\r\n    };\r\n    EventsHandler.prototype.update = function (newEvent) {\r\n        var targetIndex = this.eventIndexLookupMap.get(newEvent.id);\r\n        if (targetIndex !== undefined) {\r\n            var targetEvent = this.events[targetIndex];\r\n            if ((targetEvent === null || targetEvent === void 0 ? void 0 : targetEvent.id) === newEvent.id) {\r\n                this.events[targetIndex] = newEvent;\r\n            }\r\n        }\r\n    };\r\n    return EventsHandler;\r\n}());\r\nexport { EventsHandler };\r\nexport var createRandomID = function () {\r\n    try {\r\n        if (isBrowser()) {\r\n            return window.crypto.randomUUID();\r\n        }\r\n        var crypto_1 = require('crypto');\r\n        return crypto_1.randomUUID();\r\n    }\r\n    catch (e) {\r\n        var dt_1 = new Date().getTime();\r\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = (dt_1 + Math.random() * 16) % 16 | 0;\r\n            dt_1 = Math.floor(dt_1 / 16);\r\n            return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n};\r\nexport var performanceNow = function () {\r\n    try {\r\n        if (isBrowser()) {\r\n            return window.performance.now();\r\n        }\r\n        var performance_1 = require('perf_hooks').performance;\r\n        return performance_1.now();\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n};\r\nexport var blockForAWhile = function () {\r\n    for (var i = 0; i < 1000000; i++) {\r\n        createRandomID();\r\n    }\r\n};\r\nexport var createDeploySentinelEvent = function (type, data, error) { return ({\r\n    data: data,\r\n    id: createRandomID(),\r\n    type: type,\r\n    offset: performanceNow(),\r\n    ts: Date.now(),\r\n    error: error,\r\n}); };\r\nexport var sleep = function (ms) {\r\n    return new Promise(function (resolve) { return setTimeout(resolve, ms); });\r\n};\r\nexport var getCircularReplacer = function () {\r\n    var seen = new WeakSet();\r\n    return function (_, value) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            if (seen.has(value)) {\r\n                return;\r\n            }\r\n            seen.add(value);\r\n        }\r\n        return value;\r\n    };\r\n};\r\nexport var parseJsonString = function (input) {\r\n    var _a = __read(useTry(function () { return JSON.parse(input); }), 2), _ = _a[0], output = _a[1];\r\n    return output !== null && output !== void 0 ? output : input;\r\n};\r\nexport var HTTP_METHODS = [\r\n    'GET',\r\n    'HEAD',\r\n    'POST',\r\n    'PUT',\r\n    'DELETE',\r\n    'CONNECT',\r\n    'OPTIONS',\r\n    'TRACE',\r\n    'PATCH',\r\n];\r\nexport var validators = {\r\n    isNullish: function (input) { return input == null; },\r\n    isInteger: function (input) { return Number.isInteger(input); },\r\n    isObject: function (input) { return typeof input === 'object' && input !== null; },\r\n    isString: function (input) {\r\n        return typeof input === 'string' || input instanceof String;\r\n    },\r\n    isHTTPMethod: function (input) { return HTTP_METHODS.includes(input); },\r\n    isBoolean: function (input) { return 'boolean' === typeof input; },\r\n    isPrimitive: function (input) { return !isObject(input); },\r\n    isJsonString: function (input) {\r\n        try {\r\n            JSON.parse(input);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n};\r\nexport var filterNonPrimitiveValues = function (input) {\r\n    if (!isPlainObject(input)) {\r\n        return input;\r\n    }\r\n    var keysToPick = Object.keys(input).filter(function (key) {\r\n        return validators.isPrimitive(input[key]);\r\n    });\r\n    return pick(input, keysToPick);\r\n};\r\nexport var REQUEST_TIMEOUT = 60000;\r\nexport var MAX_API_RETRIES = 3;\r\nexport var buildAxiosInstance = function (config) {\r\n    config.headers = __assign(__assign({}, config.headers), { 'x-msw-bypass': 'true' });\r\n    var instance = axios.create(config);\r\n    axiosRetry(instance, {\r\n        retries: MAX_API_RETRIES,\r\n        retryDelay: exponentialDelay,\r\n        retryCondition: function (error) {\r\n            if (isNetworkError(error)) {\r\n                return true;\r\n            }\r\n            if (!error.config) {\r\n                return false;\r\n            }\r\n            return isRetryableError(error);\r\n        },\r\n    });\r\n    return instance;\r\n};\r\nexport var uploadToS3 = function (_a) {\r\n    var url = _a.url, artifacts = _a.artifacts, logger = _a.logger;\r\n    return __awaiter(void 0, void 0, void 0, function () {\r\n        var artifactsSize, ts, axiosInstance, e_1;\r\n        var _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    if (!url) return [3, 4];\r\n                    artifactsSize = (_b = artifacts === null || artifacts === void 0 ? void 0 : artifacts.length) !== null && _b !== void 0 ? _b : 0;\r\n                    ts = performanceNow();\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, 3, , 4]);\r\n                    if (artifactsSize === 0 || artifactsSize > 64 * 1e6) {\r\n                        throw new Error(\"Invalid artifacts size: \".concat(artifactsSize, \" bytes\"));\r\n                    }\r\n                    axiosInstance = buildAxiosInstance({\r\n                        timeout: REQUEST_TIMEOUT,\r\n                        maxContentLength: Infinity,\r\n                        maxBodyLength: Infinity,\r\n                    });\r\n                    return [4, axiosInstance.put(url, artifacts)];\r\n                case 2:\r\n                    _c.sent();\r\n                    logger === null || logger === void 0 ? void 0 : logger.info({\r\n                        location: 'axios:uploadToS3',\r\n                        message: 'finished uploading artifacts',\r\n                        meta: {\r\n                            url: url,\r\n                            took: performanceNow() - ts,\r\n                        },\r\n                    });\r\n                    return [3, 4];\r\n                case 3:\r\n                    e_1 = _c.sent();\r\n                    console.log(e_1);\r\n                    logger === null || logger === void 0 ? void 0 : logger.error({\r\n                        location: 'axios:uploadToS3',\r\n                        message: e_1,\r\n                        meta: {\r\n                            url: url,\r\n                            took: performanceNow() - ts,\r\n                        },\r\n                    });\r\n                    return [3, 4];\r\n                case 4: return [2];\r\n            }\r\n        });\r\n    });\r\n};\r\n","references":["/home/warren/Codes/deploysentinel/debugger/node_modules/axios/index.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/axios-retry/index.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/@types/lodash/isObject.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/@types/lodash/isPlainObject.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/@types/lodash/pick.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/fast-safe-stringify/index.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/fflate/lib/index.d.ts","/home/warren/Codes/deploysentinel/debugger/packages/cypress/src/clients/api.ts","/home/warren/Codes/deploysentinel/debugger/packages/cypress/src/types.ts"],"dts":{"name":"/home/warren/Codes/deploysentinel/debugger/packages/cypress/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/utils/shared.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig } from 'axios';\r\nimport { Logger } from '../clients/api';\r\nimport { DSEvent, DSEventError, DeploySentienlEventType } from '../types';\r\nexport declare const DEFAULT_DS_TASK_TIMEOUT = 60000;\r\nexport declare const NETWORK_MOCKS_CACHE_FOLDER_NAME = \".ds-network-cache\";\r\nexport declare const pack: (input: string) => string;\r\nexport declare const shouldAttachDebugger: (apiKey?: string) => boolean;\r\nexport declare const isBrowser: () => boolean;\r\nexport declare const useTry: <T>(fn: () => T) => [unknown, T | null];\r\nexport declare const tryJSONStringify: (json: Record<string, unknown> | Record<string, unknown>[]) => string | null;\r\nexport declare const jsonStringifyReplacer: (key: string, value: unknown) => unknown;\r\nexport declare const jsonStringify: (json: Record<string, unknown> | Record<string, unknown>[]) => [unknown, string | null];\r\nexport declare const stringifyAndPackArtifacts: (events: DSEvent[], logger: Logger, logPrefix?: string) => string | null;\r\nexport declare class EventsHandler {\r\n    private currentEventIndex;\r\n    protected readonly events: DSEvent[];\r\n    protected readonly eventIndexLookupMap: Map<string, number>;\r\n    clear(): void;\r\n    get(): DSEvent[];\r\n    push(event: DSEvent): void;\r\n    update(newEvent: DSEvent): void;\r\n}\r\nexport declare const createRandomID: () => any;\r\nexport declare const performanceNow: () => any;\r\nexport declare const blockForAWhile: () => void;\r\nexport declare const createDeploySentinelEvent: (type: DeploySentienlEventType, data: any, error?: DSEventError) => {\r\n    data: any;\r\n    id: any;\r\n    type: DeploySentienlEventType;\r\n    offset: any;\r\n    ts: number;\r\n    error: DSEventError | undefined;\r\n};\r\nexport declare const sleep: (ms: number) => Promise<unknown>;\r\nexport declare const getCircularReplacer: () => (_: string, value: unknown) => unknown;\r\nexport declare const parseJsonString: (input: string) => string | Record<string, any>;\r\nexport declare const HTTP_METHODS: string[];\r\nexport declare const validators: {\r\n    isNullish: (input: unknown) => boolean;\r\n    isInteger: (input: unknown) => boolean;\r\n    isObject: (input: unknown) => boolean;\r\n    isString: (input: unknown) => boolean;\r\n    isHTTPMethod: (input: string) => boolean;\r\n    isBoolean: (input: unknown) => boolean;\r\n    isPrimitive: (input: unknown) => boolean;\r\n    isJsonString: (input: string) => boolean;\r\n};\r\nexport declare const filterNonPrimitiveValues: (input: Record<string, unknown>) => Record<string, unknown>;\r\nexport declare const REQUEST_TIMEOUT = 60000;\r\nexport declare const MAX_API_RETRIES = 3;\r\nexport declare const buildAxiosInstance: (config: AxiosRequestConfig) => import(\"axios\").AxiosInstance;\r\nexport declare const uploadToS3: ({ url, artifacts, logger, }: {\r\n    url?: string | null | undefined;\r\n    artifacts: string | null;\r\n    logger?: Logger | undefined;\r\n}) => Promise<void>;\r\n"}}
