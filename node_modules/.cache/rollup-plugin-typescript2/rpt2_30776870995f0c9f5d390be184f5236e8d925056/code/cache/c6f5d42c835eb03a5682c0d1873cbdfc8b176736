{"code":"import { __assign } from \"tslib\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pick from 'lodash/pick';\r\nexport var getCypressTestUniqueName = function (cypressTest, titles, currentDepth) {\r\n    if (titles === void 0) { titles = null; }\r\n    if (currentDepth === void 0) { currentDepth = 0; }\r\n    if (!(cypressTest === null || cypressTest === void 0 ? void 0 : cypressTest.title) || currentDepth > 32) {\r\n        return '';\r\n    }\r\n    if (Array.isArray(titles)) {\r\n        titles.unshift(cypressTest.title);\r\n    }\r\n    var prefix = getCypressTestUniqueName(cypressTest.parent, titles, currentDepth + 1);\r\n    return prefix ? \"\".concat(prefix, \" \").concat(cypressTest.title) : cypressTest.title;\r\n};\r\nexport var getCypressTestId = function (filePath, cyTest) {\r\n    var testName = getCypressTestUniqueName(cyTest);\r\n    return \"\".concat(filePath, \"@@\").concat(testName, \"$$\").concat(cyTest.id, \"::\").concat(cyTest._currentRetry);\r\n};\r\nexport var formatLog = function (log) {\r\n    var _a, _b;\r\n    var alias = log.alias, id = log.id, name = log.name, message = log.message, event = log.event, ended = log.ended, state = log.state, chainerId = log.chainerId, wallClockStartedAt = log.wallClockStartedAt, type = log.type, err = log.err, hookId = log.hookId, renderProps = log.renderProps, consoleProps = log.consoleProps, numElements = log.numElements, highlightAttr = log.highlightAttr, displayName = log.displayName, method = log.method, url = log.url;\r\n    var shouldAttachYieldedProps = consoleProps.Command === 'wrap' || consoleProps.Command === 'request';\r\n    var shouldAttachRequestProps = consoleProps.Command === 'request';\r\n    return {\r\n        alias: alias,\r\n        id: id,\r\n        numElements: numElements,\r\n        highlightAttr: highlightAttr,\r\n        displayName: displayName,\r\n        chainerId: chainerId,\r\n        err: err,\r\n        type: type,\r\n        hookId: hookId,\r\n        wallClockStartedAt: wallClockStartedAt,\r\n        renderProps: {\r\n            indicator: renderProps.indicator,\r\n            message: renderProps.message,\r\n        },\r\n        consoleProps: __assign(__assign({}, (shouldAttachYieldedProps && { yielded: consoleProps.Yielded })), (shouldAttachRequestProps && { request: consoleProps.Request })),\r\n        method: (_a = consoleProps === null || consoleProps === void 0 ? void 0 : consoleProps.Method) !== null && _a !== void 0 ? _a : method,\r\n        url: (_b = consoleProps === null || consoleProps === void 0 ? void 0 : consoleProps.URL) !== null && _b !== void 0 ? _b : url,\r\n        name: name,\r\n        message: message,\r\n        event: event,\r\n        ended: ended,\r\n        state: state,\r\n    };\r\n};\r\nvar CypressTestCache = (function () {\r\n    function CypressTestCache(getFilePath) {\r\n        this.cache = new Map();\r\n        this.getFilePath = getFilePath;\r\n    }\r\n    CypressTestCache.prototype.getCacheKey = function (title, clientId, currentRetry) {\r\n        return \"\".concat(this.getFilePath(), \"@@\").concat(title, \"$$\").concat(clientId, \"::\").concat(currentRetry);\r\n    };\r\n    CypressTestCache.prototype.set = function (currentTest) {\r\n        var cacheKey = this.getCacheKey(currentTest.title, currentTest.id, currentTest._currentRetry);\r\n        if (!this.cache.has(cacheKey)) {\r\n            this.cache.set(cacheKey, cloneDeep(pick(currentTest, ['parent'])));\r\n        }\r\n    };\r\n    CypressTestCache.prototype.get = function (title, clientId, currentRetry) {\r\n        return this.cache.get(this.getCacheKey(title, clientId, currentRetry));\r\n    };\r\n    return CypressTestCache;\r\n}());\r\nexport { CypressTestCache };\r\n","references":["/home/warren/Codes/deploysentinel/debugger/node_modules/@types/lodash/cloneDeep.d.ts","/home/warren/Codes/deploysentinel/debugger/node_modules/@types/lodash/pick.d.ts","/home/warren/Codes/deploysentinel/debugger/packages/cypress/src/types.ts"],"dts":{"name":"/home/warren/Codes/deploysentinel/debugger/packages/cypress/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/utils/browser.d.ts","writeByteOrderMark":false,"text":"import type { CommandLog, CypressTest, CypressSuite } from '../types';\r\nexport declare const getCypressTestUniqueName: (cypressTest: CypressTest | CypressSuite, titles?: string[] | null, currentDepth?: number) => string;\r\nexport declare const getCypressTestId: (filePath: string, cyTest: CypressTest) => string;\r\nexport declare const formatLog: (log: CommandLog) => {\r\n    alias: string | undefined;\r\n    id: string;\r\n    numElements: number | undefined;\r\n    highlightAttr: string | undefined;\r\n    displayName: string;\r\n    chainerId: string;\r\n    err: import(\"../types\").CypressError | undefined;\r\n    type: string;\r\n    hookId: string;\r\n    wallClockStartedAt: Date;\r\n    renderProps: {\r\n        indicator: string | undefined;\r\n        message: string | undefined;\r\n    };\r\n    consoleProps: {\r\n        request?: {\r\n            'Request Body'?: unknown;\r\n            'Request Headers': Record<string, string>;\r\n            'Request URL': string;\r\n            'Response Body'?: string | undefined;\r\n            'Response Headers'?: Record<string, string> | undefined;\r\n            'Response Status'?: number | undefined;\r\n        } | undefined;\r\n        yielded?: unknown;\r\n    };\r\n    method: string;\r\n    url: string;\r\n    name: string;\r\n    message: string;\r\n    event: boolean;\r\n    ended: boolean;\r\n    state: \"passed\" | \"failed\" | \"pending\";\r\n};\r\nexport declare class CypressTestCache {\r\n    private readonly cache;\r\n    private readonly getFilePath;\r\n    private getCacheKey;\r\n    constructor(getFilePath: () => string);\r\n    set(currentTest: CypressTest): void;\r\n    get(title: string, clientId: string, currentRetry: number): Partial<CypressTest> | undefined;\r\n}\r\n"}}
