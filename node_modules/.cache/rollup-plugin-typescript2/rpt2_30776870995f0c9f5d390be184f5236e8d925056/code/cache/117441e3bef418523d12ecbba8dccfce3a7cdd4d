{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\r\nimport { version as PKG_VERSION } from '../../package.json';\r\nimport { buildAxiosInstance, performanceNow } from '../utils/shared';\r\nimport { LoggerSeverity, } from '../types';\r\nvar Logger = (function () {\r\n    function Logger(apiClient) {\r\n        this.apiClient = apiClient;\r\n        this.verbose = true;\r\n    }\r\n    Logger.prototype.setVerbose = function (verbose) {\r\n        this.verbose = verbose;\r\n    };\r\n    Logger.prototype.info = function (loggerMessage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (this.verbose) {\r\n                    return [2, this.apiClient\r\n                            .sendMessage(loggerMessage.message instanceof Error\r\n                            ? loggerMessage.message\r\n                            : new Error(loggerMessage.message), loggerMessage.location, __assign(__assign({}, loggerMessage.meta), { severity: LoggerSeverity.Info }))\r\n                            .catch(function (error) { return console.log(error); })];\r\n                }\r\n                return [2];\r\n            });\r\n        });\r\n    };\r\n    Logger.prototype.warning = function (loggerMessage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2, this.apiClient\r\n                        .sendMessage(loggerMessage.message instanceof Error\r\n                        ? loggerMessage.message\r\n                        : new Error(loggerMessage.message), loggerMessage.location, __assign(__assign({}, loggerMessage.meta), { severity: LoggerSeverity.Warning }))\r\n                        .catch(function (error) { return console.log(error); })];\r\n            });\r\n        });\r\n    };\r\n    Logger.prototype.error = function (loggerMessage) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2, this.apiClient\r\n                        .sendMessage(loggerMessage.message instanceof Error\r\n                        ? loggerMessage.message\r\n                        : new Error(loggerMessage.message), loggerMessage.location, __assign(__assign({}, loggerMessage.meta), { severity: LoggerSeverity.Error }))\r\n                        .catch(function (error) { return console.log(error); })];\r\n            });\r\n        });\r\n    };\r\n    return Logger;\r\n}());\r\nexport { Logger };\r\nvar APIClient = (function () {\r\n    function APIClient(config) {\r\n        this.apiKey = config.apiKey;\r\n        this.axiosInstance = buildAxiosInstance({\r\n            baseURL: config.baseUrl,\r\n            headers: {\r\n                'ds-api-key': config.apiKey,\r\n            },\r\n        });\r\n        this.buildId = config.buildId;\r\n        this.getRuntimeMetrics = config.getRuntimeMetrics;\r\n        this.verbose = Boolean(config.verbose);\r\n        this.logger = new Logger(this);\r\n    }\r\n    APIClient.prototype.setTestConfig = function (testConfig) {\r\n        this.testConfig = testConfig;\r\n    };\r\n    APIClient.prototype.setBuildId = function (buildId) {\r\n        this.buildId = buildId;\r\n    };\r\n    APIClient.prototype.sendMessage = function (error, location, meta) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var runtimeMetrics, e_1, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.verbose && (meta === null || meta === void 0 ? void 0 : meta.severity) === LoggerSeverity.Error) {\r\n                            console.log({\r\n                                error: error,\r\n                                location: location,\r\n                                meta: meta,\r\n                            });\r\n                        }\r\n                        runtimeMetrics = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4, this.getRuntimeMetrics()];\r\n                    case 2:\r\n                        runtimeMetrics = _a.sent();\r\n                        return [3, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        return [3, 4];\r\n                    case 4:\r\n                        _a.trys.push([4, 6, , 7]);\r\n                        return [4, this.axiosInstance.post('/message', __assign({ debuggerVersion: PKG_VERSION, buildId: this.buildId, runId: this.runId, apiKey: this.apiKey, message: error.message, name: error.name, stack: error.stack, location: location, ts: Date.now(), offset: performanceNow(), runtime: runtimeMetrics }, meta))];\r\n                    case 5:\r\n                        _a.sent();\r\n                        return [3, 7];\r\n                    case 6:\r\n                        e_2 = _a.sent();\r\n                        if (this.verbose) {\r\n                            console.log(e_2);\r\n                        }\r\n                        return [3, 7];\r\n                    case 7: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    APIClient.prototype.createRun = function (runPayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var run, resp, e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        run = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4, this.axiosInstance.post('/run', __assign(__assign({}, runPayload), { batchId: this.buildId, debuggerVersion: PKG_VERSION, testConfig: this.testConfig }))];\r\n                    case 2:\r\n                        resp = _a.sent();\r\n                        run = resp.data;\r\n                        this.runId = run === null || run === void 0 ? void 0 : run._id;\r\n                        return [2, run];\r\n                    case 3:\r\n                        e_3 = _a.sent();\r\n                        this.logger.error({\r\n                            message: e_3,\r\n                            location: 'APIClient:createRun',\r\n                            meta: { runPayload: runPayload },\r\n                        });\r\n                        return [2, run];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    APIClient.prototype.patchRun = function (runId, runPayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_4;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, this.axiosInstance.patch(\"/run/\".concat(runId), __assign(__assign({}, runPayload), { batchId: this.buildId, debuggerVersion: PKG_VERSION }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 3];\r\n                    case 2:\r\n                        e_4 = _a.sent();\r\n                        this.logger.error({\r\n                            message: e_4,\r\n                            location: 'APIClient:patchRun',\r\n                            meta: { runId: runId, runPayload: runPayload },\r\n                        });\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    APIClient.prototype.sendReport = function (ciProvider, commentInfo, runResults) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_5;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, this.axiosInstance.post('/report', {\r\n                                buildId: this.buildId,\r\n                                runId: this.runId,\r\n                                ciProvider: ciProvider,\r\n                                commentInfo: commentInfo,\r\n                                runResults: runResults,\r\n                                debuggerVersion: PKG_VERSION,\r\n                            })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 3];\r\n                    case 2:\r\n                        e_5 = _a.sent();\r\n                        this.logger.error({\r\n                            message: e_5,\r\n                            location: 'APIClient:sendReport',\r\n                            meta: {\r\n                                ciProvider: ciProvider,\r\n                                commentInfo: commentInfo,\r\n                                runResults: runResults,\r\n                            },\r\n                        });\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    APIClient.prototype.getTeam = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var resp, e_6;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, this.axiosInstance.get('/team')];\r\n                    case 1:\r\n                        resp = _a.sent();\r\n                        return [2, resp.data];\r\n                    case 2:\r\n                        e_6 = _a.sent();\r\n                        this.logger.error({\r\n                            message: e_6,\r\n                            location: 'APIClient:getTeam',\r\n                        });\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return APIClient;\r\n}());\r\nexport default APIClient;\r\n","references":["/home/warren/Codes/deploysentinel/debugger/node_modules/axios/index.d.ts","/home/warren/Codes/deploysentinel/debugger/packages/cypress/package.json","/home/warren/Codes/deploysentinel/debugger/packages/cypress/src/utils/shared.ts","/home/warren/Codes/deploysentinel/debugger/packages/cypress/src/types.ts"],"dts":{"name":"/home/warren/Codes/deploysentinel/debugger/packages/cypress/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/clients/api.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"cypress\" />\r\nimport { APIClientConfig, CommitInfo, DSRun, LoggerMessage, PatchRunPayload, RunPayload, TestConfig } from '../types';\r\nexport declare class Logger {\r\n    private readonly apiClient;\r\n    verbose: boolean;\r\n    constructor(apiClient: APIClient);\r\n    setVerbose(verbose: boolean): void;\r\n    info(loggerMessage: LoggerMessage): Promise<void>;\r\n    warning(loggerMessage: LoggerMessage): Promise<void>;\r\n    error(loggerMessage: LoggerMessage): Promise<void>;\r\n}\r\nexport default class APIClient {\r\n    private readonly apiKey;\r\n    private readonly axiosInstance;\r\n    private readonly verbose;\r\n    private readonly getRuntimeMetrics;\r\n    private buildId;\r\n    private testConfig;\r\n    private runId;\r\n    readonly logger: Logger;\r\n    constructor(config: APIClientConfig);\r\n    setTestConfig(testConfig: TestConfig): void;\r\n    setBuildId(buildId: string | undefined): void;\r\n    sendMessage(error: Error, location: string, meta?: {\r\n        [key: string]: unknown;\r\n    }): Promise<void>;\r\n    createRun(runPayload: RunPayload): Promise<DSRun | null>;\r\n    patchRun(runId: string, runPayload: PatchRunPayload): Promise<void>;\r\n    sendReport(ciProvider: string | null, commentInfo: CommitInfo, runResults?: Partial<CypressCommandLine.CypressRunResult | CypressCommandLine.CypressFailedRunResult>): Promise<void>;\r\n    getTeam(): Promise<any>;\r\n}\r\n"}}
