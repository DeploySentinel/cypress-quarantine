{"code":"export var LoggerSeverity;\r\n(function (LoggerSeverity) {\r\n    LoggerSeverity[\"Error\"] = \"error\";\r\n    LoggerSeverity[\"Info\"] = \"info\";\r\n    LoggerSeverity[\"Warning\"] = \"warning\";\r\n})(LoggerSeverity || (LoggerSeverity = {}));\r\nexport var NetworkMockMode;\r\n(function (NetworkMockMode) {\r\n    NetworkMockMode[\"Record\"] = \"record\";\r\n    NetworkMockMode[\"Intercept\"] = \"intercept\";\r\n})(NetworkMockMode || (NetworkMockMode = {}));\r\nexport var CypressRunState;\r\n(function (CypressRunState) {\r\n    CypressRunState[\"Failed\"] = \"failed\";\r\n    CypressRunState[\"Passed\"] = \"passed\";\r\n    CypressRunState[\"Pending\"] = \"pending\";\r\n    CypressRunState[\"Skipped\"] = \"skipped\";\r\n})(CypressRunState || (CypressRunState = {}));\r\nexport var Task;\r\n(function (Task) {\r\n    Task[\"ClearMocks\"] = \"DeploySentinelTaskClearMocks\";\r\n    Task[\"ClearTestLocalCache\"] = \"DeploySentinelTaskClearTestLocalCache\";\r\n    Task[\"CompleteRun\"] = \"DeploySentinelTaskCompleteRun\";\r\n    Task[\"CreateRun\"] = \"DeploySentinelTaskCreateRun\";\r\n    Task[\"Debug\"] = \"DeploySentinelTaskDebug\";\r\n    Task[\"GetBrowserArtifactsPresignedUrl\"] = \"DeploySentinelTaskGetBrowserArtifactsPresignedUrl\";\r\n    Task[\"LogRunUrl\"] = \"DeploySentinelTaskLogRunUrl\";\r\n    Task[\"PushPluginEvent\"] = \"DeploySentinelTaskPushPluginEvent\";\r\n    Task[\"ReadMockFile\"] = \"DeploySentinelTaskReadMockFile\";\r\n    Task[\"RecordMocks\"] = \"DeploySentinelTaskRecordMocks\";\r\n    Task[\"SendMessage\"] = \"DeploySentinelTaskSendMessage\";\r\n    Task[\"StartCRI\"] = \"DeploySentinelTaskStartCRI\";\r\n    Task[\"StopCRI\"] = \"DeploySentinelTaskStopCRI\";\r\n    Task[\"SupportFileIsDetected\"] = \"DeploySentinelTaskSupportFileIsDetected\";\r\n    Task[\"UploadBrowserArtifacts\"] = \"DeploySentinelTaskUploadBrowserArtifacts\";\r\n    Task[\"UploadPluginArtifacts\"] = \"DeploySentinelTaskUploadPluginArtifacts\";\r\n    Task[\"WriteMocksToFile\"] = \"DeploySentinelTaskWriteMocksToFile\";\r\n})(Task || (Task = {}));\r\n","references":["/home/warren/Codes/deploysentinel/debugger/node_modules/devtools-protocol/types/protocol.d.ts"],"dts":{"name":"/home/warren/Codes/deploysentinel/debugger/packages/cypress/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/types.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"cypress\" />\r\n/// <reference types=\"cypress\" />\r\nimport type { Protocol } from 'devtools-protocol/types/protocol';\r\nexport type RuntimeMetrics = {\r\n    os: {\r\n        freemem: number;\r\n        totalmem: number;\r\n    };\r\n    nodeProcess: {\r\n        totalHeapSize: number;\r\n        usedHeapSize: number;\r\n    };\r\n    browser: {\r\n        jsHeapUsedSize?: number;\r\n        jsHeapTotalSize?: number;\r\n    };\r\n};\r\nexport type NetworkMocksFilter = {\r\n    includeUrls: string[];\r\n    excludeUrls: string[];\r\n};\r\nexport type APIClientConfig = {\r\n    apiKey: string;\r\n    baseUrl: string;\r\n    buildId: string | undefined;\r\n    getRuntimeMetrics: () => Promise<RuntimeMetrics> | null;\r\n    verbose?: boolean;\r\n};\r\nexport type TestConfig = {\r\n    cypressVersion: string;\r\n    defaultCommandTimeout: number | undefined;\r\n    group?: string;\r\n    pageLoadTimeout: number | undefined;\r\n    parallel: boolean | undefined;\r\n    projectId: string | null;\r\n    reporter: string | undefined;\r\n    reporterOptions: unknown;\r\n    requestTimeout: number | undefined;\r\n    resolvedNodeVersion: string | undefined;\r\n    responseTimeout: number | undefined;\r\n    tag?: string;\r\n    taskTimeout: number | undefined;\r\n    video: boolean | undefined;\r\n    videoUploadOnPasses: boolean | undefined;\r\n    browser: {\r\n        isHeadless: boolean | undefined;\r\n        name: string | undefined;\r\n        version: string | undefined;\r\n    };\r\n    system: {\r\n        osName: string;\r\n        osVersion: string;\r\n    };\r\n};\r\nexport type LoggerMessage = {\r\n    message: string | Error;\r\n    location: string;\r\n    meta?: {\r\n        [key: string]: unknown;\r\n    };\r\n};\r\nexport declare enum LoggerSeverity {\r\n    Error = \"error\",\r\n    Info = \"info\",\r\n    Warning = \"warning\"\r\n}\r\nexport type DeploySentienlEventType = 'browserLogEntry' | 'console' | 'custom' | 'dom' | 'exception' | 'hook' | 'log' | 'network';\r\nexport type DSEventError = {\r\n    message: string;\r\n};\r\ntype DSNetworkRequestEventPayload = {\r\n    referrerPolicy: string;\r\n    id: string;\r\n    timestamp: number;\r\n    url: string;\r\n    headers: {\r\n        [key: string]: string;\r\n    };\r\n    method: string;\r\n    type: 'Document' | 'Stylesheet' | 'Image' | 'Media' | 'Font' | 'Script' | 'TextTrack' | 'XHR' | 'Fetch' | 'EventSource' | 'WebSocket' | 'Manifest' | 'SignedExchange' | 'Ping' | 'CSPViolationReport' | 'Preflight' | 'Other';\r\n};\r\ntype DSNetworkResponseEventPayload = {\r\n    connectionReused: boolean;\r\n    encodedDataLength: number;\r\n    fromDiskCache: boolean;\r\n    fromPrefetchCache: boolean;\r\n    fromServiceWorker: boolean;\r\n    headers: {\r\n        [key: string]: string;\r\n    };\r\n    mimeType: string;\r\n    protocol: string;\r\n    remoteIPAddress: string;\r\n    remotePort: number;\r\n    statusCode: number;\r\n    statusMessage: string;\r\n    timestamp: number;\r\n    timing: {\r\n        requestTime: number;\r\n        proxyStart: number;\r\n        proxyEnd: number;\r\n        dnsStart: number;\r\n        dnsEnd: number;\r\n        connectStart: number;\r\n        connectEnd: number;\r\n        sslStart: number;\r\n        sslEnd: number;\r\n        workerStart: number;\r\n        workerReady: number;\r\n        workerFetchStart: number;\r\n        workerRespondWithSettled: number;\r\n        sendStart: number;\r\n        sendEnd: number;\r\n        pushStart: number;\r\n        pushEnd: number;\r\n        receiveHeadersEnd: number;\r\n    };\r\n    type: string;\r\n    bodySize: number;\r\n    base64Encoded: boolean;\r\n    body: string;\r\n};\r\ntype DSNetworkEventPayload = {\r\n    type: 'network';\r\n    data: {\r\n        requestServedFromCache: boolean;\r\n        loadingFailed?: {\r\n            canceled: boolean;\r\n            errorText: string;\r\n            timestamp: number;\r\n            type: string;\r\n        };\r\n        req: DSNetworkRequestEventPayload;\r\n        res?: DSNetworkResponseEventPayload;\r\n    };\r\n    id: string;\r\n    offset: number;\r\n    took?: number;\r\n    ts: number;\r\n};\r\nexport type DSEvent = {\r\n    data: any;\r\n    id: string;\r\n    offset: number;\r\n    took?: number;\r\n    ts: number;\r\n    type: Exclude<Exclude<DeploySentienlEventType, 'network'>, 'log'>;\r\n} | {\r\n    type: 'log';\r\n    id: string;\r\n    offset: number;\r\n    took?: number;\r\n    ts: number;\r\n    data: {\r\n        beforeDomEventId: string;\r\n        beforeDomRrwebNodeIds: number[];\r\n        afterDomEventId: string;\r\n        afterDomRrwebNodeIds: number[];\r\n        windowLocation: string;\r\n        id: string;\r\n        chainerId: string;\r\n        err?: {\r\n            message: string;\r\n            name: string;\r\n            stack: string;\r\n            parsedStack: any[];\r\n        };\r\n        type: 'parent' | string;\r\n        displayName?: 'fetch' | string;\r\n        hookId?: string;\r\n        wallClockStartedAt: string;\r\n        renderProps: any;\r\n        consoleProps: any;\r\n        url: string;\r\n        name: string;\r\n        message: string;\r\n        event: boolean;\r\n        ended: boolean;\r\n        state: 'failed' | string;\r\n    };\r\n} | DSNetworkEventPayload;\r\nexport type DSRun = {\r\n    _id: string;\r\n    s3PresignedUrls: {\r\n        backendLogs: string | null;\r\n        browser: string | null;\r\n        internal: string | null;\r\n        plugin: string | null;\r\n        screenshot: string | null;\r\n    };\r\n};\r\nexport type DSNetworkMockEvent = {\r\n    body: unknown;\r\n    cacheLookupKey?: string;\r\n    method: string;\r\n    response: unknown;\r\n    status: number;\r\n    type: string;\r\n    url: string;\r\n};\r\nexport type RunsMapValue = {\r\n    backendLogsPresignedUrl: string | null;\r\n    completedAt?: number;\r\n    retryNumber: number;\r\n    spec: string;\r\n    startedAt: number;\r\n    suiteTitles: string[];\r\n};\r\nexport type RunPayload = {\r\n    ciProvider: string | null;\r\n    code: string;\r\n    commitInfo?: CommitInfo;\r\n    name: string;\r\n    retries: number;\r\n    retryNumber: number;\r\n    startedAt: Date;\r\n    testName: string;\r\n};\r\nexport type PatchRunPayload = {\r\n    batchId: string;\r\n    ciProvider?: string;\r\n    completedAt: Date;\r\n    took: number;\r\n    state: string;\r\n    errorTrace?: {\r\n        message: string;\r\n        name: string;\r\n        codeFrame: string;\r\n        stack: string;\r\n        sourceMappedStack: string;\r\n    };\r\n    networkTimings?: {\r\n        [url: string]: number[];\r\n    } | null;\r\n};\r\nexport type DSNetworkEvent = {\r\n    url?: string;\r\n    method?: string;\r\n    headers?: {\r\n        [key: string]: string;\r\n    };\r\n    request: {\r\n        url: string;\r\n        method: string;\r\n        headers: {\r\n            [key: string]: string;\r\n        };\r\n    };\r\n    response?: {\r\n        headers: {\r\n            [key: string]: string;\r\n        };\r\n        statusCode: number;\r\n        statusMessage: string;\r\n        bodySize: number;\r\n        body: string;\r\n    };\r\n};\r\nexport declare enum NetworkMockMode {\r\n    Record = \"record\",\r\n    Intercept = \"intercept\"\r\n}\r\nexport type DebuggerOptions = {\r\n    networkMock?: {\r\n        clearMocks?: boolean;\r\n        excludeUrls?: string[];\r\n        includeUrls?: string[];\r\n        methods?: ('GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' | 'HEAD')[];\r\n        mode: NetworkMockMode;\r\n        resourceTypes?: Protocol.Network.ResourceType[];\r\n    };\r\n    beforeNetworkSend?: (event: DSNetworkEvent) => DSNetworkEvent | null | undefined;\r\n};\r\nexport declare enum CypressRunState {\r\n    Failed = \"failed\",\r\n    Passed = \"passed\",\r\n    Pending = \"pending\",\r\n    Skipped = \"skipped\"\r\n}\r\nexport type CypressError = {\r\n    message: string;\r\n    name: string;\r\n    codeFrame: {\r\n        absoluteFile: string;\r\n        column: number;\r\n        frame: string;\r\n        language: string;\r\n        line: number;\r\n        originalFile: string;\r\n        relativeFile: string;\r\n    };\r\n    stack: string;\r\n    sourceMappedStack: string;\r\n};\r\nexport type CommandLog = {\r\n    alias?: string;\r\n    id: string;\r\n    name: string;\r\n    message: string;\r\n    event: boolean;\r\n    ended: boolean;\r\n    state: 'passed' | 'failed' | 'pending';\r\n    chainerId: string;\r\n    wallClockStartedAt: Date;\r\n    type: string;\r\n    err?: CypressError;\r\n    $el?: JQuery<HTMLElement>;\r\n    renderProps: {\r\n        indicator?: string;\r\n        message?: string;\r\n    };\r\n    numElements?: number;\r\n    highlightAttr?: string;\r\n    hookId: string;\r\n    displayName: string;\r\n    method: 'GET' | 'POST';\r\n    consoleProps: {\r\n        Command: string;\r\n        Elements?: number;\r\n        Error?: string;\r\n        Method?: string;\r\n        Selector?: string;\r\n        URL?: string;\r\n        Yielded?: unknown;\r\n        Request?: {\r\n            'Request Body'?: unknown;\r\n            'Request Headers': Record<string, string>;\r\n            'Request URL': string;\r\n            'Response Body'?: string;\r\n            'Response Headers'?: Record<string, string>;\r\n            'Response Status'?: number;\r\n        };\r\n    };\r\n    url: string;\r\n    passed?: boolean;\r\n    actual?: boolean;\r\n    expected?: boolean;\r\n};\r\nexport type CypressTest = {\r\n    id: string;\r\n    type: 'test';\r\n    body: string;\r\n    _retries: number;\r\n    _currentRetry: number;\r\n    title: string;\r\n    wallClockStartedAt: Date;\r\n    wallClockDuration: number;\r\n    state: CypressRunState;\r\n    err?: CypressError;\r\n    invocationDetails?: {\r\n        relativeFile: string;\r\n    };\r\n    parent: CypressSuite;\r\n};\r\nexport type CypressSuite = {\r\n    id: string;\r\n    title: string;\r\n    type: 'suite';\r\n    parent: CypressSuite;\r\n};\r\nexport type CommitInfo = {\r\n    authorEmail: string | null;\r\n    authorName: string | null;\r\n    branch: string | null;\r\n    ciBuildId: string | null;\r\n    defaultBranch: string | null;\r\n    message: string | null;\r\n    remoteBranch: string | null;\r\n    remoteOrigin: string | null;\r\n    sha: string | null;\r\n    timestamp: number | null;\r\n    metadata: unknown | null;\r\n};\r\nexport declare enum Task {\r\n    ClearMocks = \"DeploySentinelTaskClearMocks\",\r\n    ClearTestLocalCache = \"DeploySentinelTaskClearTestLocalCache\",\r\n    CompleteRun = \"DeploySentinelTaskCompleteRun\",\r\n    CreateRun = \"DeploySentinelTaskCreateRun\",\r\n    Debug = \"DeploySentinelTaskDebug\",\r\n    GetBrowserArtifactsPresignedUrl = \"DeploySentinelTaskGetBrowserArtifactsPresignedUrl\",\r\n    LogRunUrl = \"DeploySentinelTaskLogRunUrl\",\r\n    PushPluginEvent = \"DeploySentinelTaskPushPluginEvent\",\r\n    ReadMockFile = \"DeploySentinelTaskReadMockFile\",\r\n    RecordMocks = \"DeploySentinelTaskRecordMocks\",\r\n    SendMessage = \"DeploySentinelTaskSendMessage\",\r\n    StartCRI = \"DeploySentinelTaskStartCRI\",\r\n    StopCRI = \"DeploySentinelTaskStopCRI\",\r\n    SupportFileIsDetected = \"DeploySentinelTaskSupportFileIsDetected\",\r\n    UploadBrowserArtifacts = \"DeploySentinelTaskUploadBrowserArtifacts\",\r\n    UploadPluginArtifacts = \"DeploySentinelTaskUploadPluginArtifacts\",\r\n    WriteMocksToFile = \"DeploySentinelTaskWriteMocksToFile\"\r\n}\r\nexport type JunitReporterOptions = {\r\n    jenkinsMode?: boolean;\r\n    mochaFile?: string;\r\n    suiteTitleSeparatedBy?: string;\r\n    testCaseSwitchClassnameAndName?: boolean;\r\n};\r\nexport {};\r\n"}}
