/// <reference types="cypress" />
import { APIClientConfig, CommitInfo, DSRun, LoggerMessage, PatchRunPayload, RunPayload, TestConfig } from '../types';
export declare class Logger {
    private readonly apiClient;
    verbose: boolean;
    constructor(apiClient: APIClient);
    setVerbose(verbose: boolean): void;
    info(loggerMessage: LoggerMessage): Promise<void>;
    warning(loggerMessage: LoggerMessage): Promise<void>;
    error(loggerMessage: LoggerMessage): Promise<void>;
}
export default class APIClient {
    private readonly apiKey;
    private readonly axiosInstance;
    private readonly verbose;
    private readonly getRuntimeMetrics;
    private buildId;
    private testConfig;
    private runId;
    readonly logger: Logger;
    constructor(config: APIClientConfig);
    setTestConfig(testConfig: TestConfig): void;
    setBuildId(buildId: string | undefined): void;
    sendMessage(error: Error, location: string, meta?: {
        [key: string]: unknown;
    }): Promise<void>;
    createRun(runPayload: RunPayload): Promise<DSRun | null>;
    patchRun(runId: string, runPayload: PatchRunPayload): Promise<void>;
    sendReport(ciProvider: string | null, commentInfo: CommitInfo, // FIXME typo
    runResults?: Partial<CypressCommandLine.CypressRunResult | CypressCommandLine.CypressFailedRunResult>): Promise<void>;
    getTeam(): Promise<any>;
}
