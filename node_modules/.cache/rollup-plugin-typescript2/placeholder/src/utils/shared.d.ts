import { AxiosRequestConfig } from 'axios';
import { Logger } from '../clients/api';
import { DSEvent, DSEventError, DeploySentienlEventType } from '../types';
export declare const DEFAULT_DS_TASK_TIMEOUT = 60000;
export declare const NETWORK_MOCKS_CACHE_FOLDER_NAME = ".ds-network-cache";
export declare const pack: (input: string) => string;
export declare const shouldAttachDebugger: (apiKey?: string) => boolean;
export declare const isBrowser: () => boolean;
export declare const useTry: <T>(fn: () => T) => [unknown, T | null];
export declare const tryJSONStringify: (json: Record<string, unknown> | Record<string, unknown>[]) => string | null;
export declare const jsonStringifyReplacer: (key: string, value: unknown) => unknown;
export declare const jsonStringify: (json: Record<string, unknown> | Record<string, unknown>[]) => [unknown, string | null];
export declare const stringifyAndPackArtifacts: (events: DSEvent[], logger: Logger, logPrefix?: string) => string | null;
export declare class EventsHandler {
    private currentEventIndex;
    protected readonly events: DSEvent[];
    protected readonly eventIndexLookupMap: Map<string, number>;
    clear(): void;
    get(): DSEvent[];
    push(event: DSEvent): void;
    update(newEvent: DSEvent): void;
}
export declare const createRandomID: () => any;
export declare const performanceNow: () => any;
export declare const blockForAWhile: () => void;
export declare const createDeploySentinelEvent: (type: DeploySentienlEventType, data: any, error?: DSEventError) => {
    data: any;
    id: any;
    type: DeploySentienlEventType;
    offset: any;
    ts: number;
    error: DSEventError | undefined;
};
export declare const sleep: (ms: number) => Promise<unknown>;
export declare const getCircularReplacer: () => (_: string, value: unknown) => unknown;
export declare const parseJsonString: (input: string) => string | Record<string, any>;
export declare const HTTP_METHODS: string[];
export declare const validators: {
    isNullish: (input: unknown) => boolean;
    isInteger: (input: unknown) => boolean;
    isObject: (input: unknown) => boolean;
    isString: (input: unknown) => boolean;
    isHTTPMethod: (input: string) => boolean;
    isBoolean: (input: unknown) => boolean;
    isPrimitive: (input: unknown) => boolean;
    isJsonString: (input: string) => boolean;
};
export declare const filterNonPrimitiveValues: (input: Record<string, unknown>) => Record<string, unknown>;
export declare const REQUEST_TIMEOUT = 60000;
export declare const MAX_API_RETRIES = 3;
export declare const buildAxiosInstance: (config: AxiosRequestConfig) => import("axios").AxiosInstance;
export declare const uploadToS3: ({ url, artifacts, logger, }: {
    url?: string | null | undefined;
    artifacts: string | null;
    logger?: Logger | undefined;
}) => Promise<void>;
