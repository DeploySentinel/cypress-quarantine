/// <reference types="node" />
import v8 from 'v8';
import type { DSNetworkMockEvent, JunitReporterOptions, NetworkMocksFilter, RunsMapValue } from '../types';
import { Logger } from '../clients/api';
export declare const filterNetworkMocks: (mocks: DSNetworkMockEvent[], filter: NetworkMocksFilter) => DSNetworkMockEvent[];
export declare const getNetworkMockFixtureFilePath: (fixturesFolder: string, filePath: string) => string;
export declare const sha1: (value: string) => string;
export declare const getDebuggerUrl: (runId: string, isDev: boolean) => string;
export declare class NetworkEventMock {
    private readonly mocks;
    private readonly filter;
    constructor(filter: NetworkMocksFilter);
    set(testName: string, events: DSNetworkMockEvent[]): void;
    get(testName: string): DSNetworkMockEvent[] | undefined;
    getAll(): {
        [k: string]: DSNetworkMockEvent[];
    };
    clear(): void;
}
export declare class JunitReporterProcessor {
    static getParentDir: (options?: JunitReporterOptions) => string;
    static getSuiteTitleSeparatedBy: (options?: JunitReporterOptions) => string;
    static getTestCaseName: (testcase: Record<string, string>, options?: JunitReporterOptions) => string;
    private xmlParser;
    private xmlBuilder;
    private readonly reporterOptions?;
    private readonly parentDir;
    constructor(reporterOptions?: JunitReporterOptions);
    start(runId: string, metadata: RunsMapValue): void;
}
export declare const getHeapStatistics: () => v8.HeapInfo;
export declare const getOSMetrics: () => {
    freemem: number;
    totalmem: number;
};
export declare const registerHeartbeatMonitor: (getCurrentSpec: () => Cypress.Spec | undefined, logger: Logger) => void;
export declare const deregisterHeartbeatMonitor: () => void;
export declare const isChrome: (browser: Cypress.Browser) => boolean;
export declare const isElectron: (browser: Cypress.Browser) => boolean;
export declare const ensureRdpPort: (launchOptions: Cypress.BrowserLaunchOptions) => number;
