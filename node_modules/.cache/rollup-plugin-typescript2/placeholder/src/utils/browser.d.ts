import type { CommandLog, CypressTest, CypressSuite } from '../types';
export declare const getCypressTestUniqueName: (cypressTest: CypressTest | CypressSuite, titles?: string[] | null, currentDepth?: number) => string;
export declare const getCypressTestId: (filePath: string, cyTest: CypressTest) => string;
export declare const formatLog: (log: CommandLog) => {
    alias: string | undefined;
    id: string;
    numElements: number | undefined;
    highlightAttr: string | undefined;
    displayName: string;
    chainerId: string;
    err: import("../types").CypressError | undefined;
    type: string;
    hookId: string;
    wallClockStartedAt: Date;
    renderProps: {
        indicator: string | undefined;
        message: string | undefined;
    };
    consoleProps: {
        request?: {
            'Request Body'?: unknown;
            'Request Headers': Record<string, string>;
            'Request URL': string;
            'Response Body'?: string | undefined;
            'Response Headers'?: Record<string, string> | undefined;
            'Response Status'?: number | undefined;
        } | undefined;
        yielded?: unknown;
    };
    method: string;
    url: string;
    name: string;
    message: string;
    event: boolean;
    ended: boolean;
    state: "passed" | "failed" | "pending";
};
export declare class CypressTestCache {
    private readonly cache;
    private readonly getFilePath;
    private getCacheKey;
    constructor(getFilePath: () => string);
    set(currentTest: CypressTest): void;
    get(title: string, clientId: string, currentRetry: number): Partial<CypressTest> | undefined;
}
